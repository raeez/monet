Development environment
-----------------------

run `sudo ./script/dev.[ARCH]` from the project's root directory in order to setup your
development environment. The appropriate dev script for your architecture will install
the required software for your development environment, bootstrap a python virtualenv
into 'env/' and fetch and install any required dependancies into the virtualenv.

once bootstrapped, activate your environment with '. env/bin/activate'. Any
calls to python from within the virtual environment will use the virgin python executable
contained within 'env/'.

launch the servers in DEBUG mode (lib.config.DEBUG=True) with the helper scripts

client.py	->	localhost:5000

all logging in debug is done in /log, no logmails will be sent on ERROR and CRITICAL exceptions.

Production environment
----------------------

Production environments are managed through ssh deployments (see 'Deploying to Production').
A minimal environment of dependancy software, bootstrap scripts + configuration files is required before 'bootstrap'
can be called. Bootstrap then installs required service configuration files, as well as upstart scripts as follows:

nginx/ -> /etc/nginx/
upstart/ -> /etc/init/
* -> /home/ubuntu/memoize

Service and application logs can be found in /var/www/log, logmails will be sent on ERROR and CRITICAL exceptions.

Deploying to Production
-----------------------
Deploy to production is automated via ssh**

fab pack
	pack software into a python egg, store in dist

fab deploy
	install the python egg in dist to production servers, halt, upgrade and restart core services [requires server to be bootstrapped]

fab reconfig
	reinstall all configuration files in target production environment, halt and restart core services

fab rebase
  replace all base configuration files in ~/memoize

fab bootstrap
	install production environment onto a clean ubuntu instance; deploy current python egg and start core services

your typical software upgrade is a 'fab pack deploy'.
bootstrapping a clean machine is a 'fab pack boostrap'
in order to target a specific host, simply do 'fab -i hostname pack deploy' etc.

*	ensure your virtualenv is active before attempting to use any fabric deployment commands
**	ensure your .ssh/config is correctly configured to automatically authenticate/select the correct user

root folder 
-----------
client/
  serves a photo-viewing application

servlets/
	Cointains launcher servlets for each server. Used by gunicorn.

lib/
	the manhattan library: implements web framework functionality.

memoize/
  the memoize library: implements memoize client routines.

nginx/
	nginx configuration scripts, temporary certs etc.

env/
	virtualenv environments for production and development modes, generated by bootstrap and dev.[ARCH] scripts respectively.

upstart/
	upstart scripts for starting, managing and monitoring production servers.

script/dev.[ARCH]
	development bootstrap scripts for fetching required resources.

script/
  start
  stop
  restart
  list
  reload
	whoesale upstart service management wrapper-scripts. called from boostrap and production scripts, and from fabric.

  bootstrap
    script: boostraps a minimal production environment given the presence of minimal resources [see fabfile.py:rebase] requires ubuntu 10.10.

  production
    script: upgrades a given a running production environment and retarts core services.

  setup.py
  fabfile.py
    production installation and deployment specifications.

client.py
  development helper script to launch a local memoize server.
