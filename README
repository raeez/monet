Mythology
---------

The river styx is the boundary between heaven and hell. styx is our virtual python environment.
Gaia is the earth goddess. Gaia does nothing useful (yet).
Cerberus is the three headed dog that guards the gates of hades. cerberus implements a gateway to paymentech.
Hermes is the messenger godâ€”hermes implements an administrative interface transactions processed.

Development environment
-----------------------

run `sudo ./dev/dev.[ARCH]` from the project's root directory in order to setup your
development environment. The appropriate dev script for your architecture will install
the required software for your development environment, bootstrap a python virtualenv
into 'dev/' and fetch and install any required dependancies into the virtualenv.

once bootstrapped, activate your environment with '. dev/bin/activate'. Any
calls to python from within the virtual environment will use the virgin python executable
contained within 'dev/'.

launch the servers in DEBUG mode (lib.config.DEBUG=True) with the helper scripts

cerberus.py	->	localhost:5100
hermes.py	->	localhost:5200
gaia.py		->	localhost:5300

all logging in debug is done in /log, no logmails will be sent on ERROR and CRITICAL exceptions.

Production environment
----------------------

Production environments are managed through ssh deployments (see 'Deploying to Production').
A minimal environment of dependancy software, bootstrap scripts + configuration files is required before 'bootstrap'
can be called. Bootstrap then installs required service configuration files, as well as upstart scripts as follows:

nginx/ -> /etc/nginx/
fcgi/ -> /var/www/
upstart/ -> /etc/init/
* -> /home/ubuntu/manhattan

Service and application logs can be found in /var/www/log, logmails will be sent or ERROR and CRITICAL exceptions.

Deploying to Production
-----------------------
Deploy to production is automated via ssh**

fab pack
	pack software into a python egg, store in dist

fab deploy
	install the python egg in dist to production servers, halt, upgrade and restart core services

fab reconfig
	reinstall all configuration files in target production environment, halt and restart core services

fab bootstrap
	install production environment onto a clean ubuntu instance; deploy current python egg and start core services

your typical software upgrade is a 'fab pack deploy'.
bootstrapping a clean machine is a 'fab pack boostrap'
in order to target a specific host, simply do 'fab -i hostname pack deploy' etc.

*	ensure your virtualenv is active before attempting to use any fabric deployment commands
**	ensure your .ssh/config is correctly configured to automatically authenticate/select the correct user

root folder 
-----------
cerberus/
	cerberus server - parses, validates and dispatches to lib/ all incoming api requests from the outside world.
	Exposes the following RESTful resources:

	[GET|POST|PUT|DELETE]	instrument/bank_card		[bank card store]
	[GET|POST|PUT|DELETE]	instrument/bank_account		[bank account store]
	[GET|POST]		transaction/charge		[pull money by instrument auth'd by processor key]
	[GET|POST]		transaction/refund		[refund a bank card or ach transfer]
	[GET]			key/processor			[merchant processor keys]
	[POST]			merchant			[board merchants]

hermes/
	hermes server - serves an admin interface to access information regarding merchants boarded and transactions processed.

gaia/
	gaia server - monitors core services.

fcgi/
	contains the FastCGI scripts hosting cerberus, gaia and hermes through a flup FastCGI WSGI server.
lib/
	the manhattan library: implements functionality from db access to processor/bank interfaces.

nginx/
	nginx configuration scripts, temporary certs etc.

styx/
dev/
	virtualenv environments for production and development modes, generated by bootstrap and dev.[ARCH] scripts respectively.

upstart/
	upstart scripts for starting, managing and monitoring the fcgi servers.

dev.[ARCH]
	development bootstrap scripts for fetching required resources.

start
stop
restart
list
	whoesale upstart service management wrapper-scripts. called from boostrap and production scripts.

bootstrap
	script: boostraps a minimal production environment given the presence of minimal resources [see fabfile.py:rebase] requires ubuntu 10.10.

production
	script: upgrades a given a running production environment and retarts core services.

setup.py
fabfile.py
	production installation and deployment specifications.

cerberus.py
gaia.py
hermes.py
	development helper scripts for launching services using flask in development mode (as opposed to flup fcgi servers).
